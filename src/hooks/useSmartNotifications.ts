import { useEffect, useState } from 'react';
import { useToast } from '@/hooks/use-toast';
import { Storage } from '@/lib/storage'; // ta classe Storage avec getValue/setValue

export function useSmartNotifications() {
  const { toast } = useToast();
  const [hasShownWelcome, setHasShownWelcome] = useState(false);

  useEffect(() => {
    async function showWelcomeIfNeeded() {
      try {
        const hasVisited = await Storage.getValue<string>('moodspace-visited');
        if (!hasVisited && !hasShownWelcome) {
          setTimeout(() => {
            toast({
              title: "Bienvenue dans MoodSpace ! üåü",
              description: "Appuyez sur Shift+? pour voir les raccourcis clavier",
              duration: 5000,
            });
            setHasShownWelcome(true);
            Storage.setValue('moodspace-visited', 'true').catch(console.error);
          }, 2000);
        }
      } catch (error) {
        console.error('Erreur v√©rification visite:', error);
      }
    }

    async function checkTimeAndNotify() {
      try {
        const hour = new Date().getHours();
        const lastReminder = await Storage.getValue<string>('last-productivity-reminder');
        const today = new Date().toDateString();

        if (lastReminder !== today) {
          if (hour >= 9 && hour <= 11) {
            setTimeout(() => {
              toast({
                title: "Moment productif ! üöÄ",
                description: "C'est le moment id√©al pour organiser tes t√¢ches",
                duration: 4000,
              });
              Storage.setValue('last-productivity-reminder', today).catch(console.error);
            }, 10000);
          } else if (hour >= 14 && hour <= 16) {
            setTimeout(() => {
              toast({
                title: "Pause cr√©ative ? üé®",
                description: "Pourquoi ne pas cr√©er quelque chose dans ton moodboard ?",
                duration: 4000,
              });
              Storage.setValue('last-productivity-reminder', today).catch(console.error);
            }, 10000);
          }
        }
      } catch (error) {
        console.error('Erreur notification productivit√©:', error);
      }
    }

    async function checkTaskCompletion() {
      try {
        const today = new Date().toISOString().split('T')[0];
        const tasksJSON = await Storage.getValue<string>(`tasks-${today}`);
        const tasks = tasksJSON ? JSON.parse(tasksJSON) : [];
        const completedTasks = tasks.filter((task: any) => task.completed);

        const lastEncouragement = await Storage.getValue<string>('last-encouragement');
        const lastCountStr = await Storage.getValue<string>('last-completed-count');
        const lastCount = lastCountStr ? parseInt(lastCountStr, 10) : 0;

        if (
          completedTasks.length > lastCount &&
          completedTasks.length > 0 &&
          lastEncouragement !== today
        ) {
          const messages = [
            "Excellent travail ! üéâ",
            "Tu es en feu ! üî•",
            "Continue comme √ßa ! ‚≠ê",
            "Impressionnant ! üí™",
            "Tu d√©chires ! üåü"
          ];

          toast({
            title: messages[Math.floor(Math.random() * messages.length)],
            description: `${completedTasks.length} t√¢che${completedTasks.length > 1 ? 's' : ''} termin√©e${completedTasks.length > 1 ? 's' : ''} aujourd'hui !`,
            duration: 3000,
          });

          await Storage.setValue('last-encouragement', today);
          await Storage.setValue('last-completed-count', completedTasks.length.toString());
        }
      } catch (error) {
        console.error('Erreur encouragement t√¢ches:', error);
      }
    }

    // D√©marrage des notifications
    showWelcomeIfNeeded();
    checkTimeAndNotify();
    const productivityInterval = setInterval(checkTimeAndNotify, 60 * 60 * 1000);
    const taskInterval = setInterval(checkTaskCompletion, 30000);

    return () => {
      clearInterval(productivityInterval);
      clearInterval(taskInterval);
    };
  }, [toast, hasShownWelcome]);

  const notifyThemeChange = (themeName: string) => {
    toast({
      title: "Nouveau style appliqu√© ! ‚ú®",
      description: `Th√®me "${themeName}" activ√© avec succ√®s`,
      duration: 2000,
    });
  };

  const notifySuccess = (action: string, details?: string) => {
    const successMessages = {
      export: "Donn√©es export√©es ! üì¶",
      save: "Sauvegard√© ! üíæ",
      create: "Cr√©√© avec succ√®s ! ‚ú®",
      complete: "Termin√© ! ‚úÖ",
      delete: "Supprim√© ! üóëÔ∏è"
    };

    toast({
      title: successMessages[action as keyof typeof successMessages] || "Action r√©ussie !",
      description: details || "L'action a √©t√© effectu√©e avec succ√®s",
      duration: 2500,
    });
  };

  return {
    notifyThemeChange,
    notifySuccess,
  };
}
